// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  created_at DateTime @default(now())
  name       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workshops     Workshop[]
  materials     Material[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  name        String     @unique
  slug        String     @unique
  description String
  materials   Material[]
}

model Material {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  title           String
  // very simple / simple / medium / advanced / specialized
  // 1 2 3 4 5
  complexity      Int        @default(2)
  // 5min, 10min, 15min, 30min, 1h+
  // 1 2 3 4 5
  timeConsumption Int        @default(1)
  description     String?
  mediaUrl        String?    @unique
  paragraph       String?
  authorId        String
  author          User       @relation(fields: [authorId], references: [id], onDelete: Restrict)
  workshops       Workshop[]
  categorySlug    String
  category        Category   @relation(fields: [categorySlug], references: [slug], onDelete: Restrict)
}

model Workshop {
  id          String     @id @default(cuid())
  authorId    String
  title       String
  description String
  date        DateTime
  author      User       @relation(fields: [authorId], references: [id], onDelete: Restrict)
  materials   Material[]
}
